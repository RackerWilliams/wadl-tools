<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>


        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
              
         <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
              <imageobject>
              <imagedata fileref="img/Arrow_east.svg"
                            format="SVG" scale="60"/>
              </imageobject>
              </inlinemediaobject>'>
              
        <!ENTITY CODES       'Normal Response Code(s):'>
        <!ENTITY ERROR_CODES 'Error Response Code(s):'>
        <!ENTITY NO_REQUEST  '<para xmlns="http://docbook.org/ns/docbook">
                          This operation does not require a request body.</para>'>
        <!ENTITY LONG_URI_REFHEAD '
          <thead xmlns="http://docbook.org/ns/docbook">
            <tr>
              <td colspan="1">Verb</td>
              <td colspan="4">URI</td>
              <td colspan="3">Description</td>
            </tr>
          </thead>'>
        <!ENTITY URI_REFHEAD '
          <thead xmlns="http://docbook.org/ns/docbook">
            <tr>
              <td colspan="1">Verb</td>
              <td colspan="1">URI</td>
              <td colspan="4">Description</td>
            </tr>
          </thead>'>
        ]>

<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
    <title>Cloud Auth Developer Guide</title>
    <titleabbrev>Cloud Auth Dev Guide</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.1</releaseinfo>
        <productname>Cloud Auth</productname>
        <pubdate>03/10/11</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>
                This document is intended for software developers interested
                in developing applications which interact with the Rackspace Cloud
                Authentication Service.
            </para>
        </abstract>
    </info>
    <chapter>
        <title>Overview</title>
        <para> The Cloud Authentication Service allows clients to obtain tokens that can be used to
            access resources in the Rackspace Cloud. </para>
        <section>
            <title>Intended Audience</title>
            <para>
                This document is intended for two kinds of software
                developers:
            </para>
            <variablelist>
                <varlistentry>
                    <term>Client Developers</term>
                    <listitem>
                        <para>
                            Client developers wish to consume an existing cloud service
                            such as Cloud Files or Cloud Servers. The Cloud Authentication 
                            Service allows these developers to obtain an
                            authentication token and a list of regional service
                            endpoints to the various services available in the cloud.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Service Developers</term>
                    <listitem>
                        <para> Service developers wish to write a new cloud
                            service. The Cloud Authentication Service allows these developers to validate tokens,
                            create new users, and assign regional endpoints to users. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                This Guide assumes the reader is familiar with ReSTful web
                services, HTTP/1.1, and JSON and/or XML serialization formats.
            </para>
        </section>
        <section>
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and supersedes all previous versions.
                The most recent changes are described in the table below:
            </para>
            <informaltable rules='all'>
                <thead>
                    <tr align="center">
                        <td colspan="1">Revision Date</td>
                        <td colspan="4">Summary of Changes</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="1" align="center">Mar. 10, 2011</td>
                        <td colspan="4" align="left">
                            <itemizedlist spacing="compact">
                                <listitem>
                                    <para>Initial release.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                </tbody>
            </informaltable>
        </section>
        <section>
            <title>Additional Resources</title>
            <para>To see how the Cloud Authentication Service is used by other services, read the API documentation collected at
                at <link xlink:href="http://docs.rackspacecloud.com/api/">
                    http://docs.rackspacecloud.com/api/</link>.
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Concepts</title>
        <para>
            To use the Cloud Authentication Service effectively, you should understand several key concepts:
        </para>
        <section>
            <title>Token</title>
            <para> A token is an opaque string that represents an authorization to access cloud
                resources. Tokens may be revoked at any time and are valid for a finite duration. </para>
        </section>
        <section>
            <title>Service Catalog</title>
            <para> The service catalog is a library of endpoints that a token is authorized to
                access. The service catalog defines the scope of a token. </para>
        </section>
        <section>
            <title>Endpoint</title>
            <para> An endpoint is an entry point to an API. The endpoint is defined
                as a set of base URLs. API operations are defined relative to these URLs. An API may
                offer several regional endpoints for a single API. </para>
        </section>
        <section>
            <title>Public URL</title>
            <para> A public URL is a URL that is accessible from anywhere. Access to a public URL
                usually incurs traffic charges. </para>
        </section>
        <section>
            <title>Internal URL</title>
            <para> An internal URL is a URL that is accessible only from within the Rackspace Cloud
                network. Access to an internal URL is always free of charge. </para>
        </section>
        <section>
            <title>Public URL</title>
            <para> A public URL is a URL that is accessible from anywhere. Access to a public URL
                usually incurs traffic charges. </para>
        </section>
    </chapter>
    <chapter>
        <title>General API Information</title>
        <para> The Cloud Authentication Service API is implemented using a ReSTful web service interface. All requests
            to authenticate and operate against Cloud Servers are performed using SSL over HTTP
            (HTTPS) on TCP port 443. </para>
        <section>
            <title>Request/Response Types</title>
            <para> The Cloud Authentication API supports both the JSON and XML data serialization
                formats. The request format is specified using the <code>Content-Type</code> header
                and is required for operations that have a request body. The response format can be
                specified in requests either by using the <code>Accept</code> header or by adding an
                    <code>.xml</code> or <code>.json</code> extension to the request URI. Note that
                it is possible for a response to be serialized using a format different from the
                request. If no response format is specified, JSON is the default. If conflicting
                formats are specified using both an <code>Accept</code> header and a query
                extension, the query extension takes precedence. </para>
            <table rules="all">
                <caption>Response Types</caption>
                <thead>
                    <tr>
                        <td>Format</td>
                        <td>Accept Header</td>
                        <td>Query Extension</td>
                        <td>Default</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>JSON</td>
                        <td>application/json</td>
                        <td>.json</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>XML</td>
                        <td>application/xml</td>
                        <td>.xml</td>
                        <td>No</td>
                    </tr>
                </tbody>
            </table>
            <para>
                In the following example, the content type is set to
                <code>application/json</code> but <code>application/xml</code> is requested via
                the <code>Accept</code> header. 
            </para>
            <example>
                <title>Request with Headers: JSON</title>
                <literallayout class="monospaced">
POST /v1.1/auth HTTP/1.1
Host: auth.api.rackspacecloud.com
Content-Type: application/json
Accept: application/xml
                </literallayout>
                <programlisting language="javascript">
<xi:include href="samples/credentials.json" parse="text"/>
                </programlisting>
            </example>
            <example>
                <title>Response with Headers: XML</title>
                <literallayout class="monospaced">
HTTP/1.1 200 OKAY
Date: Mon, 12 Nov 2010 15:55:01 GMT
Server: Apache
Content-Length:
Content-Type: application/xml; charset=UTF-8
                </literallayout>
                <programlisting language="xml">
<xi:include href="samples/tidy/auth.xml" parse="text"/>
                </programlisting>
            </example>
            <para> 
                An alternative method of achieving the same result
                is illustrated below: this time, a URI extension rather than an
                    <code>Accept</code> header sets the content type. 
            </para>
            <example>
                <title>Request with Extension: JSON</title>
                <literallayout class="monospaced">
POST /v1.1/auth.xml HTTP/1.1
Host: auth.api.rackspacecloud.com
Content-Type: application/json
                </literallayout>
                <programlisting language="javascript">
<xi:include href="samples/credentials.json" parse="text"/>
                </programlisting>
            </example>
        </section>
        <section>
            <title>Content Compression</title>
            <para>
                Request and response body data may be encoded with gzip
                compression to accelerate interactive performance of
                API calls and responses. This is controlled using the
                <code>Accept-Encoding</code> header on the request from the client and
                indicated by the <code>Content-Encoding</code> header in the server
                response. Unless the header is explicitly set, encoding
                defaults to disabled.
            </para>
            <table rules="all">
                <caption>Compression Headers</caption>
                <thead>
                    <tr>
                        <td>Header Type</td>
                        <td>Name</td>
                        <td>Value</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>HTTP/1.1 Request</td>
                        <td>Accept-Encoding</td>
                        <td>gzip</td>
                    </tr>
                    <tr>
                        <td>HTTP/1.1 Response</td>
                        <td>Content-Encoding</td>
                        <td>gzip</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section>
            <title>API Version</title>
            <para> The Cloud Authentication API uses a URI versioning scheme. The first element of
                the path contains the target version identifier: for example, in 
                https://auth.api.rackspacecloud.com/v1.1/&hellip;, the API version is 1.1. Other than requests to query for version, 
                all requests must contain a target version. 
                Any features or functionality
                changes that would necessitate a break in API compatibility will require a new
                version, which will result in the URI version being updated accordingly. When new
                API versions are released, older versions will be marked as <code>DEPRECATED</code>.
                Rackspace will work with developers and partners to ensure that there is adequate time to
                migrate to the new version before deprecated versions are discontinued. </para>
            <section>
                <title>List Versions</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">https://auth.api.rackspacecloud.com/</td>
                            <td colspan="3">Retrieve a list of Cloud Auth versions.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <para>
                    Your application can programmatically determine available API
                    versions by performing a &GET; on the root URL
                    (https://auth.api.rackspacecloud.com/).
                </para>
                &NO_REQUEST;
                <example>
                    <title>API Versions Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/versions.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>API Versions Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/versions.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section>
                <title>Get Version Details</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">https://auth.api.rackspacecloud.com/v1.1/</td>
                            <td colspan="3">Retrieve Cloud Auth version details.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <para> 
                    You can obtain additional information about a specific version by performing
                    a &GET; on the base version URL; https://auth.api.rackspacecloud.com/v1.1/ is an
                    example of a base version URL. Version request URLs should always end with a
                    trailing slash (/). If the slash is omitted, the server may respond with a
                        <errorcode>302</errorcode> redirection request. 
                    </para>
                    <para>
                        Format extensions may be
                    placed after the base version URL's trailing slash: for example, in
                    https://servers.api.rackspacecloud.com/v1.0/.xml, .xml is a format extension. 
                    </para>
                &NO_REQUEST;
                <example>
                    <title>API Version Details Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/tidy/version.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>API Version Details Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/tidy/version.json" parse="text"/>
                    </programlisting>
                </example>
                <para> The detailed version response contains a pointer to both a human-readable and
                    a machine-processable description of the API service. The machine-processable
                    description is written in the Web Application Description Language (WADL). </para>
                <note>
                    <para> If a discrepancy exists between the two specifications, the WADL is
                        authoritative as it contains the most accurate and current description of
                        the API service. </para>
                </note>
            </section>
        </section>
        <section>
            <title>Faults</title>
            <para> When an error occurs, the Cloud Authentication Service will return an HTTP error
                response code denoting the type of error. In the body of the response, the system
                will return additional information about the fault. </para>
            <example>
                <title>Fault Response: XML</title>
                <programlisting language="xml">
<xi:include href="samples/authFault.xml" parse="text"/>
                </programlisting>
            </example>
            <example>
                <title>Fault Response: JSON</title>
                <programlisting language="javascript">
<xi:include href="samples/authFault.json" parse="text"/>
                </programlisting>
            </example>
            <para> The error code is returned in the body of the response for convenience. The
                message section returns a human-readable message that is appropriate for display to
                the end user. The details section is optional and may contain information, such as a
                stack trace, useful for tracking down an error. The detail section may or may not be
                appropriate for display to an end user. </para>
            <para> The fault's root element (for example, authFault) may change depending on the
                type of error. The following is an example of an itemNotFound error. </para>
            <example>
                <title>Not Found Fault: XML</title>
                <programlisting language="xml">
<xi:include href="samples/notfound.xml" parse="text"/>
                </programlisting>
            </example>
            <example>
                <title>Not Found Fault: JSON</title>
                <programlisting language="javascript">
<xi:include href="samples/notfound.json" parse="text"/>
                </programlisting>
            </example>
            <para>
                The following is a list of possible elements along with their
                associated error codes.
            </para>
            <table rules="all">
                <caption>Fault Types</caption>
                <thead>
                    <tr>
                        <td>Fault Element</td>
                        <td>Associated Error Code</td>
                        <td>Expected in All Requests</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>authFault</td>
                        <td>500, 400, others</td>
                        <td align="center">&CHECK;
                        </td>
                    </tr>
                    <tr>
                        <td>serviceUnavailable</td>
                        <td>503</td>
                        <td align="center">&CHECK;
                        </td>
                    </tr>
                    <tr>
                        <td>unauthorized</td>
                        <td>401</td>
                        <td align="center">&CHECK;
                        </td>
                    </tr>
                    <tr>
                        <td>badRequest</td>
                        <td>400</td>
                        <td align="center">&CHECK;
                        </td>
                    </tr>
                    <tr>
                        <td>userDisabled</td>
                        <td>403</td>
                        <td align="center"/>
                    </tr>
                    <tr>
                        <td>forbidden</td>
                        <td>403</td>
                        <td align="center"/>
                    </tr>
                    <tr>
                        <td>itemNotFound</td>
                        <td>404</td>
                        <td align="center"/>
                    </tr>
                    <tr>
                        <td>usernameConflict</td>
                        <td>409</td>
                        <td align="center"/>
                    </tr>
                </tbody>
            </table>
            <para> From an XML schema perspective, all API faults are extensions of the base fault
                type, <type>AuthFault</type>. When working with a system such as JAXB that binds XML
                to actual classes, <type>AuthFault</type> can be used as a “catch-all” if there's no interest in
                distinguishing between individual fault types. </para>
        </section>
    </chapter>
    <chapter>
        <title>Client Developer Operations</title>
        <section>
            <title>Authenticate</title>
            <informaltable rules="all">
                &URI_REFHEAD;
                <tbody>
                    <tr>
                        <td colspan="1">&POST;
                        </td>
                        <td colspan="1">/auth</td>
                        <td colspan="4">
                            Authenticate to receive a token and a service catalog.
                        </td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara>
                &CODES; <returnvalue>200</returnvalue>,
                <returnvalue>203</returnvalue>
            </simpara>
            <simpara>
                &ERROR_CODES;
                unauthorized (<errorcode>401</errorcode>),
                userDisabled (<errorcode>403</errorcode>),
                badRequest (<errorcode>400</errorcode>),
                authFault (<errorcode>500</errorcode>),
                serviceUnavailable (<errorcode>503</errorcode>)
            </simpara>
            <para>
                The authenticate operation provides clients with an
                authentication token and a list of regional cloud endpoints.
            </para>
            <example>
                <title>Auth Request: XML</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="credentials.xml.user" units="linecolumn" coords="5 32"/>
                        <area xml:id="credentials.xml.key" units="linecolumn" coords="6 52"/>
                    </areaspec>
                    <programlisting language="xml">
<xi:include href="samples/credentials.xml" parse="text"/>
                    </programlisting>
                </programlistingco>
            </example>
            <example>
                <title>Auth Request: JSON</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="credentials.json.user" units="linecolumn" coords="4 32"/>
                        <area xml:id="credentials.json.key" units="linecolumn" coords="5 52"/>
                    </areaspec>
                    <programlisting language="javascript">
<xi:include href="samples/credentials.json" parse="text"/>
                    </programlisting>
                </programlistingco>
            </example>
            <calloutlist>
                <callout arearefs="credentials.xml.user">
                    <para>
                        The username supplied here is your common Rackspace Cloud
                        username.
                    </para>
                </callout>
                <callout arearefs="credentials.xml.key">
                    <para> The key is your API access key. The key can be obtained from the
                        Rackspace Cloud Control Panel in the <guimenu>Your Account</guimenu>/
                            <guimenuitem>API Access</guimenuitem> section. </para>
                </callout>
            </calloutlist>
            <example>
                <title>Auth Response: XML</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="auth.xml.token.expires" units="linecolumn" coords="6 45"/>
                        <area xml:id="auth.xml.sc.s.e.region" units="linecolumn" coords="10 23"/>
                        <area xml:id="auth.xml.sc.s.e.v1d" units="linecolumn" coords="11 27"/>
                        <area xml:id="auth.xml.sc.s.e.pu" units="linecolumn" coords="12 20"/>
                        <area xml:id="auth.xml.sc.s.e.iu" units="linecolumn" coords="13 22"/>
                        <area xml:id="auth.xml.sc.s.e.nr" units="linecolumn" coords="29 16"/>
                    </areaspec>
                    <programlisting language="xml">
<xi:include href="samples/tidy/auth.xml" parse="text"/>
                    </programlisting>
                </programlistingco>
            </example>
            <example>
                <title>Auth Response: JSON</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="auth.json.token.expires" units="linecolumn" coords="6 52"/>
                        <area xml:id="auth.json.sc.s.e.region" units="linecolumn" coords="11 38"/>
                        <area xml:id="auth.json.sc.s.e.v1d" units="linecolumn" coords="12 40"/>
                        <area xml:id="auth.json.sc.s.e.pu" units="linecolumn" coords="13 32"/>
                        <area xml:id="auth.json.sc.s.e.iu" units="linecolumn" coords="14 34"/>
                        <area xml:id="auth.json.sc.s.e.nr" units="linecolumn" coords="33 31"/>
                    </areaspec>
                    <programlisting language="javascript">
<xi:include href="samples/tidy/auth.json" parse="text"/>
                    </programlisting>
                </programlistingco>
            </example>
            <calloutlist>
                <callout arearefs="auth.xml.token.expires">
                    <para> Tokens are valid for a finite duration. The <code>expires</code>
                        attribute denotes the time after which the token will become invalid.
                        Clients are encouraged to cache a token until it expires. Note, however,
                        that a token may be revoked before the time identified by the
                            <code>expires</code> attribute. </para>
                </callout>
                <callout arearefs="auth.xml.sc.s.e.region">
                    <para>
                        A service may expose endpoints in different regions.
                        Regional endpoints allow clients to provision resources in
                        a manner that provides high availability.
                    </para>
                </callout>
                <callout arearefs="auth.xml.sc.s.e.v1d">
                    <para> The <code>v1Default</code> attribute denotes that an endpoint is being
                        returned in version 1.0 of the Cloud Authentication Service. The default
                        value of <code>v1Default</code> is <code>false</code>; clients
                        should assume the value is <code>false</code> when the attribute is missing. Auth 1.0
                        does not offer support for regional endpoints and therefore only returns one
                        endpoint per service. Resources stored in endpoints where
                            <code>v1Default</code> is<code>false</code>, will not be seen by Auth
                        1.0 clients. </para>
                </callout>
                <callout arearefs="auth.xml.sc.s.e.pu auth.xml.sc.s.e.iu">
                    <para>
                        An endpoint can be assigned public and internal URLs. A
                        public URL is accessible from anywhere. Access to a public
                        URL usually incurs traffic charges. Internal URLs are only
                        accessible to services within the same region. Access to
                        an internal URL is free of charge.
                    </para>
                </callout>
                <callout arearefs="auth.xml.sc.s.e.nr">
                    <para> Some services are not region-specific. These services supply a single
                        non-regional endpoint and do not provide access to internal URLs. </para>
                </callout>
            </calloutlist>
        </section>
    </chapter>
    <chapter>
        <title>Service Developer Operations</title>
        <section>
            <title>Overview</title>
            <para> The operations described in this chapter allow service developers to validate
                tokens, create users, and assign regional endpoints to users. </para>
            <section>
                <title>Authentication</title>
                <para>
                    Service developer operations require HTTP basic access
                    authentication. Please contact the API team to obtain a
                    username and password.
                </para>
                <example>
                    <title>Authenticated Request</title>
                    <literallayout class="monospaced">
GET /v1.1/baseURLs HTTP/1.1
Host: auth.api.rackspacecloud.com
Accept: application/xml
Authorization: Basic YXV0aDphdXRoMTIz
                    </literallayout>
                </example>
            </section>
            <section>
                <title>Mock Implementation</title>
                <para> 
                    A mock implementation of the Cloud Authentication Service is provided to
                    allow service teams to test against version 1.1 of the Cloud Authentication
                    Service (also called Auth 1.1). The mock implementation accepts valid requests
                    and always replies with a valid response, but makes no effort to actually
                    simulate the exact behavior of Auth 1.1. For example, performing a &GET; on
                    /users/ <parameter>anyUser</parameter> will always return a valid user response,
                    even if <parameter>anyUser</parameter> was never actually created. 
                </para>
                <para>
                    You can use
                    the <code>X-PLEASE-RAISE</code> header to simulate errors. The header denotes
                    the error code that corresponds to the fault that should be raised. If multiple faults
                    correspond to the error code, append a semi-colon followed by an integer to denote
                    additional faults. For example, if 403 maps to three separate faults, the first
                    fault can denoted by specifying 403 or by specifying 403;1. The second fault can
                    be denoted by 403;2, the third by 403;3 and so on. </para>
                <example>
                    <title>Using X-PLEASE-RAISE Header</title>
                    <literallayout class="monospaced">
GET /auth-mock/users/anyUser HTTP/1.1
Host: staging.api.rackspacecloud.com
Accept: application/xml
Authorization: Basic YXV0aDphdXRoMTIz
X-PLEASE-RAISE: 404
                    </literallayout>
                </example>
                <example>
                    <title>X-PLEASE-RAISE Response</title>
                    <programlisting language="javascript">
{"itemNotFound":{"message":"Item Not Found (Raise 404)",
"code":404}}
                    </programlisting>
                </example>
                <para>
                    The mock service returns debug information via the
                    <code>X-DEBUG</code> header. You should consult
                    the <code>X-DEBUG</code> header to confirm that
                    your requests are being handled correctly. For
                    example, when issuing a &DELETE; on
                    /users/<parameter>anyUser</parameter> the
                    following response is returned:
                </para>
                <example>
                    <title>Mock &DELETE; Response</title>
                    <literallayout class="monospaced">
HTTP/1.1 204 No Content
Server: Apache-Coyote/1.1
X-DEBUG: Deleting user anyUser
                    </literallayout>
                </example>
                <para>
                    The mock implementation is deployed in the API staging environment.
                    Please contact the API team for details on how to access
                    it.
                </para>
            </section>
        </section>
        <section>
            <title>Token Operations</title>
            <section>
                <title>Authenticate</title>
                <informaltable rules="all">
                    &URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;
                            </td>
                            <td colspan="1">/auth</td>
                            <td colspan="4">
                                Authenticate to receive a token and a service catalog.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    userDisabled (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <example>
                    <title>Mosso Authentication Request: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/mosso-credentials.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Mosso Authentication Request: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/mosso-credentials.json" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Nast Authentication Request: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/nast-credentials.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Nast Auth Request: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/nast-credentials.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Validate Token</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">
                                /token/<parameter>tokenId</parameter>?<parameter>belongsTo</parameter>=<literal>Username</literal>&amp;
                                <parameter>type</parameter>=(<constant>CLOUD</constant>|<constant>NAST</constant>|<constant>MOSSO</constant>)
                            </td>
                            <td colspan="3">
                                Check that a token is valid and that it belongs to a
                                particular user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    userDisabled (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <example>
                    <title>Validate Token Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/full-token.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Validate Token Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/full-token.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Revoke Token</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;
                            </td>
                            <td colspan="4">/token/<parameter>tokenId</parameter>
                            </td>
                            <td colspan="3">
                                Revoke an existing token.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES;
                    <returnvalue>204</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
            </section>
        </section>
        <section>
            <title>User Operations</title>
            <section>
                <title>Create User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;
                            </td>
                            <td colspan="4">/users</td>
                            <td colspan="3">
                                Create a new user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES;
                    <returnvalue>201</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    usernameConflict (<errorcode>409</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
            </section>
            <section>
                <title>Get User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>
                            </td>
                            <td colspan="3">
                                Get a user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
                <example>
                    <title>User Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Update User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>
                            </td>
                            <td colspan="3">
                                Update a user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
            </section>
            <section>
                <title>Delete User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>
                            </td>
                            <td colspan="3">
                                Delete a user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES;
                    <returnvalue>204</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
            </section>
            <section>
                <title>Get User Enabled</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/enabled
                            </td>
                            <td colspan="3"> See whether a user is enabled. </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
                <example>
                    <title>User Enabled Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user-enabled.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Enabled Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user-enabled.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Set User Enabled</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/enabled
                            </td>
                            <td colspan="3">
                                Update a user's enable state.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <example>
                    <title>User Enabled Request: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user-enabled.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Enabled Request: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user-enabled.json" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Enabled Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user-enabled.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Enabled Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user-enabled.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Get User Key</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/key
                            </td>
                            <td colspan="3">
                                Get a user's API Key.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
                <example>
                    <title>User Key Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user-key.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Key Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user-key.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Set User Key</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/key
                            </td>
                            <td colspan="3">
                                Set a user's API key.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <example>
                    <title>User Key Request: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user-key.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Key Request: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user-key.json" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Key Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/user-key.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>User Key Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/user-key.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Get Service Catalog for a User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/serviceCatalog
                            </td>
                            <td colspan="3">
                                Get a user's service catalog.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
            </section>
            <section>
                <title>Get User with an Alternate ID</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/nast/<parameter>nastId</parameter>
                            </td>
                            <td colspan="3">
                                Get a user from a Nast Id.
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/mosso/<parameter>mossoId</parameter>
                            </td>
                            <td colspan="3">
                                Get a user from a mosso Id.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES;
                    <returnvalue>303</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
            </section>
        </section>
        <section>
            <title>Base URLs</title>
            <section>
                <title>Get Base URLs</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/baseURLs?<parameter>serviceName</parameter>=<literal>ServiceName</literal>
                            </td>
                            <td colspan="3">
                                Get a list of base URLs.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
                <example>
                    <title>Base URLs Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/baseURLs.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Base URLs Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/baseURLs.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Get Base URL</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/baseURLs/<parameter>baseURLId</parameter>
                            </td>
                            <td colspan="3">
                                Get a base URL.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
                <example>
                    <title>Base URL Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/baseURL.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Base URL Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/baseURL.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Get Base URLs for a User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/baseURLRefs
                            </td>
                            <td colspan="3">
                                Get a list of base URLs for a user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES; <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
                <example>
                    <title>Base URL Refs Response: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/baseURLRefs.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Base URL Refs Response: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/baseURLRefs.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Add Base URL to a User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/baseURLRefs
                            </td>
                            <td colspan="3">
                                Add a base URL to a user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES;
                    <returnvalue>201</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <example>
                    <title>Add Base URL Request: XML</title>
                    <programlisting language="xml">
<xi:include href="samples/baseURLRequest.xml" parse="text"/>
                    </programlisting>
                </example>
                <example>
                    <title>Add Base URL Request: JSON</title>
                    <programlisting language="javascript">
<xi:include href="samples/baseURLRequest.json" parse="text"/>
                    </programlisting>
                </example>
            </section>
            <section>
                <title>Remove Base URLs from a User</title>
                <informaltable rules="all">
                    &LONG_URI_REFHEAD;
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;
                            </td>
                            <td colspan="4">/users/<parameter>userId</parameter>/baseURLRefs/<parameter>baseURLId</parameter>
                            </td>
                            <td colspan="3">
                                Remove Base URL from a user.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    &CODES;
                    <returnvalue>204</returnvalue>
                </simpara>
                <simpara>
                    &ERROR_CODES;
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                &NO_REQUEST;
            </section>
        </section>
    </chapter>
</book>
